package cn.com.leadfar.struts2.freemarker;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import freemarker.template.Configuration;
import freemarker.template.Template;
public class Test {
	public static void main(String[] args) throws Exception {
		// 通过freemarker的configuration读取相应的ftl
		Configuration cfg = new Configuration();
		// 设置加载模板文件的目录
		cfg.setClassForTemplateLoading(Test.class, "/ftl");
		// 加载模板,找到名为aaa.ftl的文件
		Template template = cfg.getTemplate("abc.ftl");
		// 创建数据模型
		Map<String, Object> root = new HashMap<String, Object>();
		root.put("username", "张三"); // 这种变量成为:模型中的变量
		Writer out = new PrintWriter(System.out);
		template.process(root, out);
		out.flush();
		out.close();
	}
}

src/ftl/abc.ftl:
<html>
	<head>
		<meta http-equiv="Content-type" content="text/html; charset=UTF-8">
		<title>hello</title>
	</head>
	<body>
		<#-- 
		使用include可能会出现覆盖的问题,可以使用import完成导入,并且加入名称空间,见下面的例子
		<#include "/inc/inc1.ftl"/>
		<#include "/inc/inc2.ftl"/>
		${username} <#-- 输出:钱八 -->
		-->
		<#import "/inc/inc1.ftl" as inc1/>
		<#import "/inc/inc2.ftl" as inc2>
		${inc1.username} <#-- 输出:李功 -->
		${inc2.username} <#-- 输出:钱八 -->
		<#-- 将一个变量定义到一个名称空间,下面的如果写成<#assign age=12 in inc3/>会报错 -->
		<#assign age=12 in inc2/>
		${inc2.age} <#-- 输出:12 -->
		<#-- 访问名称空间的自定义指令,如果写成:<@test/>会报错 -->
		<@inc1.test/>	
	</body>
</html>