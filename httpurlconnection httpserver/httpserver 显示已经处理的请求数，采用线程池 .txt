package httpserver;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
@SuppressWarnings("restriction")
public class HttpServerTest {
    public static void main(String[] args) {
        try { 
            //允许最大连接数
            int backLog = 10;
            InetSocketAddress inetSock = new InetSocketAddress(8086);
			HttpServer httpServer = HttpServer.create(inetSock, backLog);
            //显示已经处理的请求数，采用线程池 
            httpServer.createContext("/test",new HandlerTestB());
            httpServer.setExecutor(null);
            httpServer.start();
            System.out.println("HttpServer Test Start!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
@SuppressWarnings("restriction")
class HandlerTestB implements HttpHandler{
    private static int requestNum = 0;
    ThreadPoolExecutor threadPoolExecutor;
    HandlerTestB(){
         threadPoolExecutor = new  ThreadPoolExecutor(2,3,30,TimeUnit.SECONDS,
                 new ArrayBlockingQueue<Runnable>(2),
                 new ThreadPoolExecutor.CallerRunsPolicy());
    }
    public void handle(HttpExchange he) throws IOException {
        if((getQueueSize(threadPoolExecutor.getQueue()))<2){
            RequestTasks rqt = new RequestTasks(he);
            threadPoolExecutor.execute(rqt);
        }else{
        	System.out.println("Please Wait!");
        }
    }
    private synchronized int getQueueSize(Queue queue){
        return queue.size();
    }
}
@SuppressWarnings("restriction")
//处理请求的任务  
class RequestTasks implements Runnable{
    static int processedNum = 0;
    HttpExchange httpExchange;
    RequestTasks(HttpExchange he){
        httpExchange = he;
        processedNum++;
    }
    public void run() {
        System.out.println("ProcessedNum:" +processedNum);
        String responseString = "ProcessedNum:" + processedNum + "\n";
        try{
	        httpExchange.sendResponseHeaders(200, responseString.length());
	        OutputStream os = httpExchange.getResponseBody();
	        os.write(responseString.getBytes());
	        os.close();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}






 




