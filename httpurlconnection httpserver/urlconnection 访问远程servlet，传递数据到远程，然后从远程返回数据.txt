HttpConnection.java:
package com.httpConnection;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
public class HttpConnection {
	public static void main(String[] args) throws Exception {
		URL url=new URL("http://localhost/ldata/DataServlet");
		HttpURLConnection conn=(HttpURLConnection) url.openConnection();
		conn.setConnectTimeout(6*1000);
		conn.setDoOutput(true);
		conn.setDoInput(true);
		conn.setUseCaches(false);
		conn.setRequestProperty("Content-Type", "application/x-java-serialized-object");
		conn.setRequestMethod("POST");
		conn.setRequestProperty("Charset", "UTF-8");
		conn.connect();
		OutputStream os = conn.getOutputStream();//此处getOutputStream会隐含的进行connect(即：如同调用上面的connect()方法， 所以在开发中不调用上述的connect()也可以)。 
		ObjectOutputStream objectOutputStream=new ObjectOutputStream(os);
		objectOutputStream.writeObject(new String("我是测试数据"));// 向对象输出流写出数据，这些数据将存到内存缓冲区中
		// 关闭流对象。此时，不能再向对象输出流写入任何数据，先前写入的数据存在于内存缓冲区中, 
		// 在调用下边的getInputStream()函数时才把准备好的http请求正式发送到服务器
		objectOutputStream.flush();
		objectOutputStream.close();
		// 调用HttpURLConnection连接对象的getInputStream()函数,
		// 将内存缓冲区中封装好的完整的HTTP请求电文发送到服务端。
		InputStream inStrm = conn.getInputStream(); // <===注意，实际发送请求的代码段就在这里 
		// 上边的httpConn.getInputStream()方法已调用,本次HTTP请求已结束,下边向对象输出流的输出已无意义，
		// 既使对象输出流没有调用close()方法，下边的操作也不会向对象输出流写入任何数据. 
		// 因此，要重新发送数据时需要重新创建连接、重新设参数、重新创建流对象、重新写数据、
		// 重新发送数据(至于是否不用重新这些操作需要再研究)
		objectOutputStream.writeObject(new String("abc"));
		conn.getInputStream();
		InputStream is = conn.getInputStream();//其实在这里才开始调用远端的servlet程序
		BufferedReader br=new BufferedReader(new InputStreamReader(is, "UTF-8"));
		System.out.println(br.readLine());
		conn.disconnect();
	}
}
-------------------
DataServlet.java:
package com.neusoft.gazelle.core.servlet;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
public class DataServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {
		doPost(request, response);
	}
	protected void doPost(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {
		try {
			InputStream inStream = req.getInputStream(); 
			ObjectInputStream objInStream = new ObjectInputStream(inStream); 
			Object obj = objInStream.readObject();
			System.out.println(obj.toString());
			resp.getWriter().write("xxx");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}

