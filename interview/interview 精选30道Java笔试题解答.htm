<!DOCTYPE html>
<html lang="zh-cn">
<head>
<meta charset="utf-8"/>
<title>精选30道Java笔试题解答 - Alexia(minmin) - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=k2uL13BZlYpYjZ7FITMnMaB1mOfAPcMGfJChBRaBpP01"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/ThinkInside/bundle-ThinkInside.css?v=AYJ3JDrlkHMNaZ98AwsNMYonaCnbUkGPNd4ch-B6S_Q1"/>
<link type="text/css" rel="stylesheet" href="/blog/customcss/113759.css?v=J6E0RD2BOpCva7hjOtaLLMoYNrE%3d"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/lanxuezaipiao/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/lanxuezaipiao/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/lanxuezaipiao/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'lanxuezaipiao', cb_enable_mathjax=true;</script>
<script src="/bundles/blog-common.js?v=Pbt4uMm_qWARxxiPM8vQwX0Bh-yg-NcQxX73-xkOCnw1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>
<!--PageBeginHtml Block Begin-->
<a href="https://github.com/lanxuezaipiao"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://github-camo.global.ssl.fastly.net/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png"></a>
<!--PageBeginHtml Block End-->

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/lanxuezaipiao/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/lanxuezaipiao/">程序媛想事儿（Alexia）</a></h1>
<h2>在现实的社会中还想追求小幸福的那个傻菇凉...</h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/lanxuezaipiao/">首页</a></li>
<li><a class="menu" href="http://q.cnblogs.com/">博问</a></li>
<li><a class="menu" href="http://home.cnblogs.com/ing/">闪存</a></li>
<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://space.cnblogs.com/msg/send/Alexia(minmin)">联系</a></li>
<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/lanxuezaipiao/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/lanxuezaipiao/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			
<!--done-->
随笔- 101&nbsp;
文章- 0&nbsp;
评论- 672&nbsp;

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		

<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/lanxuezaipiao/p/3371224.html">精选30道Java笔试题解答</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 都是一些非常非常基础的题，是我最近参加各大IT公司笔试后靠记忆记下来的，经过整理献给与我一样参加各大IT校园招聘的同学们，纯考Java基础功底，老手们就不用进来了，免得笑话我们这些未出校门的孩纸们，但是IT公司就喜欢考这些基础的东西，所以为了能进大公司就~~~当复习期末考吧。<span style="color: #ff0000;">花了不少时间整理，在整理过程中也学到了很多东西，请大家认真对待每一题~~~</span></span></div>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">&nbsp;</div>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei'; color: #ff0000;">下面都是我自己的答案非官方，仅供参考，如果有疑问或错误请一定要提出来，大家一起进步啦~~~</span></div>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">&nbsp;</div>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">1. 下面哪些是Thread类的方法（）</span></div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">A start() &nbsp; &nbsp; &nbsp; B run() &nbsp; &nbsp; &nbsp; C exit() &nbsp; &nbsp; &nbsp; D getPriority()</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">答案：ABD</span></p>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">解析：看Java API docs吧：http://docs.oracle.com/javase/7/docs/api/，exit()是System类的方法，如System.exit(0)。</span></div>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">2. 下面关于java.lang.Exception类的说法正确的是（）</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">A 继承自Throwable &nbsp; &nbsp;&nbsp; B Serialable &nbsp; &nbsp;&nbsp; CD 不记得，反正不正确<br /></span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">答案：A</span></p>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">解析：Java异常的基类为java.lang.Throwable，<span style="color: #ff0000;">java.lang.Error和java.lang.Exception继承 Throwable</span>，RuntimeException和其它的Exception等继承Exception，具体的RuntimeException继承RuntimeException。 </span></div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">扩展：错误和异常的区别(Error vs Exception)&nbsp;</span></p>
<p id="cnblogs_post_body" style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">1)&nbsp;<strong>java.lang.Error</strong>: Throwable的子类，用于标记严重错误。<strong>合理的应用程序不应该去try/catch这种错误。绝大多数的错误都是非正常的，就根本不该出现的。<br /></strong><strong>java.lang.Exception</strong>: Throwable的子类，用于指示一种合理的程序想去catch的条件。<strong>即它仅仅是一种程序运行条件，而非严重错误，并且鼓励用户程序去catch它。</strong></span></p>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">
<p><span style="font-family: 'Microsoft Yahei';">2)&nbsp; Error和RuntimeException 及其子类都是未检查的异常（unchecked exceptions），而所有其他的Exception类都是检查了的异常（checked exceptions）.<br /><strong>checked exceptions:<span class="Apple-converted-space">&nbsp;</span></strong>通常是从一个可以恢复的程序中抛出来的，并且最好能够从这种异常中使用程序恢复。比如FileNotFoundException, ParseException等。检查了的异常发生在编译阶段，<span style="font-size: 14px;">必须要使用try&hellip;catch（或者throws）否则编译不通过。</span><br /><strong>unchecked exceptions:<span class="Apple-converted-space">&nbsp;</span></strong>通常是如果一切正常的话本不该发生的异常，但是的确发生了。<span style="font-family: 'Microsoft Yahei';"><span style="font-size: 14px;">发生在运行期，具有不确定性，主要是由于程序的逻辑问题所引起的</span></span>。比如ArrayIndexOutOfBoundException, ClassCastException等。从语言本身的角度讲，程序不该去catch这类异常，虽然能够从诸如RuntimeException这样的异常中catch并恢复，但是并不鼓励终端程序员这么做，因为完全没要必要。因为这类错误本身就是bug，应该被修复，出现此类错误时程序就应该立即停止执行。 因此，面对Errors和unchecked exceptions应该让程序自动终止执行，程序员不该做诸如try/catch这样的事情，而是应该查明原因，修改代码逻辑。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">RuntimeException：RuntimeException体系包括错误的类型转换、数组越界访问和试图访问空指针等等。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">处理RuntimeException的原则是：如果出现 RuntimeException，那么一定是程序员的错误。例如，可以通过检查数组下标和数组边界来避免数组越界访问异常。其他（IOException等等）checked异常一般是外部错误，例如试图从文件尾后读取数据等，这并不是程序本身的错误，而是在应用环境中出现的外部错误。&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">3. 下面程序的运行结果是（）</span></p>
<div class="cnblogs_code">
<pre>String str1 = "hello"<span style="color: #000000;">;
String str2 </span>= "he" + <span style="color: #0000ff;">new</span> String("llo"<span style="color: #000000;">);
System.err.println(str1 </span>== str2);</pre>
</div>
<p><span style="font-family: 'Microsoft Yahei';">答案：<span style="font-family: 'Microsoft Yahei';">false</span></span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：因为str2中的llo是新申请的内存块，而==判断的是对象的地址而非值，所以不一样。如果是String str2 = str1，那么就是true了。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">4.</span> 下列说法正确的有（）</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">A． class中的constructor不可省略</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">B． constructor必须与class同名，但方法不能与class同名</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">C． constructor在一个对象被new时执行</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">D．一个class只能定义一个constructor</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">答案：C&nbsp;</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">解析：这里可能会有误区，其实<span style="color: #ff0000;"><span class="Apple-converted-space">普通的类</span>方法是可以和类名同名的，和构造方法唯一的区分就是，构造方法没有返回值。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">5. 具体选项不记得，但用到的知识如下：</span></p>
<p><span style="font-family: 'Microsoft Yahei';">String []a = new String[10];</span></p>
<p><span style="font-family: 'Microsoft Yahei';">则：a[0]~a[9] = null</span></p>
<p><span style="font-family: 'Microsoft Yahei';">a.length = 10</span></p>
<p><span style="font-family: 'Microsoft Yahei';">如果是int []a = new int[10];</span></p>
<p><span style="font-family: 'Microsoft Yahei';">则：a[0]~a[9] = 0</span></p>
<p><span style="font-family: 'Microsoft Yahei';"><span style="font-family: 'Microsoft Yahei';">a.length = 10</span></span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">6. 下面程序的运行结果：（）</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">    public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String args[]) {</span>
<span style="color: #000000;">
        Thread t </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Thread() {

            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> run() {
                pong();
            }
        };

        t.run();
        System.out.print(</span>"ping"<span style="color: #000000;">);

    }

    </span><span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> pong() {

        System.out.print(</span>"pong"<span style="color: #000000;">);

    }</span></pre>
</div>
<p><span style="font-family: 'Microsoft Yahei';">A pingpong &nbsp; &nbsp; &nbsp;&nbsp; B pongping &nbsp; &nbsp; &nbsp; C pingpong和pongping都有可能 &nbsp; &nbsp; &nbsp; D 都不输出</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：<span style="font-family: 'Microsoft Yahei';">B</span></span></p>
<p><span style="font-family: 'Microsoft Yahei';"><span style="font-family: 'Microsoft Yahei';">解析：<span style="font-family: 'Microsoft Yahei';"><span style="font-family: 'Microsoft Yahei';">去了static用类对象引用仍为B，对Thread的运行机制不是很了解，不知道为啥，欢迎大家补充。</span></span></span></span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'Microsoft Yahei';">7. 下列属于关系型数据库的是（）<br /></span></p>
<p><span style="font-family: 'Microsoft Yahei';">A. Oracle &nbsp; &nbsp;B MySql &nbsp; &nbsp;C IMS &nbsp; &nbsp; D MongoDB</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：<span style="font-family: 'Microsoft Yahei';">AB</span></span></p>
<p><span style="font-family: 'Microsoft Yahei';">解答：IMS（Information Management System&nbsp;）数据库是IBM公司开发的两种数据库类型之一;&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">一种是关系数据库，典型代表产品：DB2；</span></p>
<p><span style="color: #ff0000; font-family: 'Microsoft Yahei';">另一种则是层次数据库，代表产品：IMS层次数据库。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">非关系型数据库有MongoDB、<span class="hilite1">memcachedb、Redis等</span>。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">8. GC线程是否为守护线程？（）</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：是</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：线程分为守护线程和非守护线程（即用户线程）。</span></p>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="color: #ff0000;">只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。</span></div>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="color: #ff0000;"><strong>守护线程最典型的应用就是 GC (垃圾回收器)</strong></span></div>
<p>&nbsp;</p>
<p><span style="font-family: 'Microsoft Yahei';">9. volatile关键字是否能保证线程安全？（）</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：不能</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：volatile关键字用在多线程同步中，<span style="font-family: 'Microsoft Yahei';">可保证读取的可见性，JVM只是保证从主内存加载到线程工作内存的值是最新的读取值，而非cache中。但</span>多个线程对</span></p>
<p><span style="font-family: 'Microsoft Yahei';">volatile的写操作，无法保证线程安全。</span>例如假如线程1，线程2 在进行read,load 操作中，发现主内存中count的值都是5，那么都会加载这个最新的值，在线程1堆count进行修改之后，会write到主内存中，主内存中的count变量就会变为6；线程2由于已经进行read,load操作，在进行运算之后，也会更新主内存count的变量值为6；导致两个线程及时用volatile关键字修改之后，还是会存在并发的情况。</p>
<p><span style="font-family: 'Microsoft Yahei';"><br />
</span></p>
<p><span style="font-family: 'Microsoft Yahei';">10. 下列说法正确的是（）</span></p>
<p><span style="font-family: 'Microsoft Yahei';">A LinkedList继承自List</span></p>
<p><span style="font-family: 'Microsoft Yahei';">B AbstractSet继承自Set</span></p>
<p><span style="font-family: 'Microsoft Yahei';">C HashSet继承自AbstractSet</span></p>
<p><span style="font-family: 'Microsoft Yahei';">D WeakMap继承自HashMap</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：AC</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：</span>下面是一张下载的Java中的集合类型的继承关系图，一目了然。</p>
<p>&nbsp;</p>
<p><img src="http://my.csdn.net/uploads/201205/13/1336921705_7500.jpg" alt="" width="703" height="381" /></p>
<p><span style="font-family: 'Microsoft Yahei';">11. 存在使i + 1 &lt; i的数吗（）</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：存在</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：如果i为int型，那么当i为int能表示的最大整数时，i+1就溢出变成负数了，此时不就&lt;i了吗。</span></p>
<p><span style="font-family: 'Microsoft Yahei'; color: #ff0000;">扩展：存在使i &gt; j || i &lt;= j不成立的数吗（）</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：存在</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：比如Double.NaN或Float.NaN，感谢@<a href="http://home.cnblogs.com/u/306742/" target="_blank">BuilderQiu</a>网友指出。<br /></span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">12. 0.6332的数据类型是（）</span></p>
<p><span style="font-family: 'Microsoft Yahei';">A float &nbsp; &nbsp; B double &nbsp; &nbsp; C Float &nbsp; &nbsp;&nbsp; D Double</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：B</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：默认为double型，如果为float型需要加上f显示说明，即0.6332f</span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">13. 下</span><span>面哪个流类属于面向字符的输入流</span><span>(&nbsp; )</span></p>
<p><span>A&nbsp; </span><span>BufferedWriter&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B&nbsp; </span><span>FileInputStream&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </span><span style="font-family: 'Microsoft Yahei';"><span style="color: #000000; font-family: 微软雅黑; font-size: 10.5pt; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" lang="EN-US">C&nbsp; </span><span style="color: #000000; font-family: 微软雅黑; font-size: 10.5pt; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;" lang="EN-US">ObjectInputStream&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D&nbsp; InputStreamReader</span></span></p>
<p>&nbsp;答案：D</p>
<p>&nbsp;解析：Java的IO操作中有面向字节(Byte)和面向字符(Character)两种方式。<br />
面向字节的操作为以8位为单位对二进制的数据进行操作，对数据不进行转换，这些类都是InputStream和OutputStream的子类。<br />
面向字符的操作为以字符为单位对数据进行操作，在读的时候将二进制数据转为字符，在写的时候将字符转为二进制数据，这些类都是Reader和Writer的子类。</p>
<p>总结：<span style="color: #ff0000;">以InputStream（输入）/OutputStream（输出）为后缀的是字节流；</span></p>
<p><span style="color: #ff0000;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 以Reader（输入）/Writer（输出）为后缀的是字符流。</span></p>
<p>扩展：Java流类图结构，一目了然，解决大部分选择题：</p>
<p>&nbsp;</p>
<p><img src="http://pic002.cnblogs.com/images/2012/384764/2012031413373126.jpg" alt="" /></p>
<p><span style="font-family: 'Microsoft Yahei';">14. Java接口的修饰符可以为（）</span></p>
<p><span style="font-family: 'Microsoft Yahei';">A private &nbsp; &nbsp; B protected &nbsp;&nbsp;&nbsp; C final &nbsp; &nbsp; &nbsp; D abstract</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：CD</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：接口很重要，为了说明情况，这里稍微啰嗦点：</span></p>
<p>（1）接口用于描述系统对外提供的所有服务,因此接口中的成员常量和方法都必须是公开(public)类型的,确保外部使用者能访问它们；</p>
<p>（2）接口仅仅描述系统能做什么,但不指明如何去做,所以接口中的方法都是抽象(abstract)方法；</p>
<p>（3）接口不涉及和任何具体实例相关的细节,因此接口没有构造方法,不能被实例化,没有实例变量，只有静态（static）变量；</p>
<p><span style="font-family: 'Microsoft Yahei';">（4）</span>接口的中的变量是所有实现类共有的，既然共有，肯定是不变的东西，因为变化的东西也不能够算共有。所以变量是不可变(final)类型，也就是常量了。</p>
<p><span style="font-family: 'Microsoft Yahei';">（5）</span> 接口中不可以定义变量？如果接口可以定义变量，但是接口中的方法又都是抽象的，在接口中无法通过行为来修改属性。有的人会说了，没有关系，可以通过 实现接口的对象的行为来修改接口中的属性。这当然没有问题，但是考虑这样的情况。如果接口 A 中有一个public 访问权限的静态变量 a。按照 Java 的语义，我们可以不通过实现接口的对象来访问变量 a，通过 A.a = xxx; 就可以改变接口中的变量 a 的值了。正如抽象类中是可以这样做的，那么实现接口 A 的所有对象也都会自动拥有这一改变后的 a 的值了，也就是说一个地方改变了 a，所有这些对象中 a 的值也都跟着变了。这和抽象类有什么区别呢，怎么体现接口更高的抽象级别呢，怎么体现接口提供的统一的协议呢，那还要接口这种抽象来做什么呢？所以接口中 不能出现变量，如果有变量，就和接口提供的统一的抽象这种思想是抵触的。所以接口中的属性必然是常量，只能读不能改，这样才能为实现接口的对象提供一个统 一的属性。</p>
<p>通俗的讲，你认为是要变化的东西，就放在你自己的实现中，不能放在接口中去，接口只是对一类事物的属性和行为更高层次的抽象。对修改关闭，对扩展（不同的实现 implements）开放，接口是对开闭原则的一种体现。</p>
<p>所以：</p>
<p><span style="color: #ff0000;">接口的方法默认是public abstract；</span></p>
<p>接口中不可以定义变量即只能定义常量(加上final修饰就会变成常量)。<span style="color: #ff0000;">所以接口的属性默认是public static final 常量，且必须赋初值</span>。</p>
<p><span style="color: #ff0000;">注意：final和abstract不能同时出现。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">15. 不通过构造函数也能创建对象吗（）</span></p>
<p><span style="font-family: 'Microsoft Yahei';">A 是 &nbsp; &nbsp; B 否</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：A</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：Java创建对象的几种方式（重要）：</span></p>
<p><span style="font-family: 'Microsoft Yahei';">(1) 用new语句创建对象，这是最常见的创建对象的方法。<br /> (2) 运用反射手段,调用java.lang.Class或者java.lang.reflect.Constructor类的newInstance()实例方法。<br /> (3) 调用对象的clone()方法。<br /> (4) 运用反序列化手段，调用java.io.ObjectInputStream对象的 readObject()方法。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">(1)和(2)都会明确的显式的调用构造函数 ；(3)是在内存上对已有对象的影印，所以不会调用构造函数 ；(4)是从文件中还原类的对象，也不会调用构造函数。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">16. ArrayList list = new ArrayList(20);中的list扩充几次（）</span></p>
<p><span style="font-family: 'Microsoft Yahei';">A 0 &nbsp; &nbsp; B 1 &nbsp; &nbsp; C 2 &nbsp; &nbsp;&nbsp; D 3</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：A</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：这里有点迷惑人，大家都知道默认ArrayList的长度是10个，所以如果你要往list里添加20个元素肯定要扩充一次（扩充为原来的1.5倍），但是这里显示指明了需要多少空间，所以就一次性为你分配这么多空间，也就是不需要扩充了。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">17. 下面哪些是对称加密算法（）</span></p>
<p><span style="font-family: 'Microsoft Yahei';">A DES &nbsp; B AES &nbsp; C DSA &nbsp; D RSA</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：AB</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：常用的对称加密算法有：<span style="font-family: 'Microsoft Yahei';">DES、3DES、RC2、RC4、AES</span></span></p>
<p><span style="font-family: 'Microsoft Yahei';">常用的非对称加密算法有：RSA、DSA、ECC</span></p>
<p><span style="font-family: 'Microsoft Yahei';">使用单向散列函数的加密算法：MD5、SHA</span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">18.</span><span>新建一个流对象，下面哪个选项的代码是错误的？（</span><span>）</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>A</span><span>）</span><span>new BufferedWriter(new FileWriter("a.txt"));</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>B</span><span>）</span><span>new BufferedReader(new FileInputStream("a.dat"));</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>C</span><span>）</span><span>new GZIPOutputStream(new FileOutputStream("a.zip"));</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>D</span><span>）</span><span>new ObjectInputStream(new FileInputStream("a.dat"));</span></p>
<p><span style="font-family: 'Microsoft Yahei';">答案：<span>B</span><br /></span></p>
<p><span style="font-family: 'Microsoft Yahei';"><span>解析：请记得13题的那个图吗？Reader只能用FileReader进行实例化。</span></span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p><span style="font-family: 'Microsoft Yahei';">19. 下面程序能正常运行吗（）</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> NULL {

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> haha(){
        System.out.println(</span>"haha"<span style="color: #000000;">);
    }
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {
        ((NULL)</span><span style="color: #0000ff;">null</span><span style="color: #000000;">).haha();
    }

}</span></pre>
</div>
<p><span style="font-family: 'Microsoft Yahei';">答案：<span style="font-family: 'Microsoft Yahei';">能正常运行</span></span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：输出为haha，因为null值可以强制转换为任何java类类型,(String)null也是合法的。但null强制转换后是无效对象，其返回值还是为null，而static方法的调用是和类名绑定的，不借助对象进行访问所以能正确输出。反过来，没有static修饰就只能用对象进行访问，使用null调用对象肯定会报空指针错了。这里和C++很类似。这里感谢@<a href="http://home.cnblogs.com/u/405877/" target="_blank">Florian</a>网友解答。</span></p>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p style="font-family: 'Microsoft Yahei';"><span style="font-family: 'Microsoft Yahei';">20. 下面程序的运行结果是什么（）</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">class</span><span style="color: #000000;"> HelloA {

    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> HelloA() {
        System.out.println(</span>"HelloA"<span style="color: #000000;">);
    }
    
    { System.out.println(</span>"I'm A class"<span style="color: #000000;">); }
    
    </span><span style="color: #0000ff;">static</span> { System.out.println("static A"<span style="color: #000000;">); }

}

</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> HelloB <span style="color: #0000ff;">extends</span><span style="color: #000000;"> HelloA {
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> HelloB() {
        System.out.println(</span>"HelloB"<span style="color: #000000;">);
    }
    
    { System.out.println(</span>"I'm B class"<span style="color: #000000;">); }
    
    </span><span style="color: #0000ff;">static</span> { System.out.println("static B"<span style="color: #000000;">); }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) { 
　　　　 </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HelloB(); 
　　 }

}</span></pre>
</div>
<p style="font-family: 'Microsoft Yahei';">答案：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">static</span><span style="color: #000000;"> A
</span><span style="color: #0000ff;">static</span><span style="color: #000000;"> B
I</span>'m A class
<span style="color: #000000;">HelloA
I</span>'m B class
HelloB</pre>
</div>
<p>解析：说实话我觉得这题很好，考查静态语句块、构造语句块（就是只有大括号的那块）以及构造函数的执行顺序。</p>
<p>对象的初始化顺序：（1）<span style="font-size: 14px;">类加载之后，按从上到下（从父类到子类）执行被static修饰的语句；（2）<span style="font-size: 14px;">当static语句执行完之后,再执行main方法</span>；（3）如果有语句new了自身的对象，将从上到下执行构造代码块、构造器（两者可以说绑定在一起）。</span></p>
<p><span style="font-size: 14px;">下面稍微修改下上面的代码，以便更清晰的说明情况：</span></p>
<div class="cnblogs_code" onclick="cnblogs_code_show('11054109-b986-4654-9430-cca3e153b147')"><img id="code_img_closed_11054109-b986-4654-9430-cca3e153b147" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_11054109-b986-4654-9430-cca3e153b147" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('11054109-b986-4654-9430-cca3e153b147',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_11054109-b986-4654-9430-cca3e153b147" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">class</span><span style="color: #000000;"> HelloA {

    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> HelloA() {
        System.out.println(</span>"HelloA"<span style="color: #000000;">);
    }
    
    { System.out.println(</span>"I'm A class"<span style="color: #000000;">); }
    
    </span><span style="color: #0000ff;">static</span> { System.out.println("static A"<span style="color: #000000;">); }

}

</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> HelloB <span style="color: #0000ff;">extends</span><span style="color: #000000;"> HelloA {
    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> HelloB() {
        System.out.println(</span>"HelloB"<span style="color: #000000;">);
    }
    
    { System.out.println(</span>"I'm B class"<span style="color: #000000;">); }
    
    </span><span style="color: #0000ff;">static</span> { System.out.println("static B"<span style="color: #000000;">); }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {

        System.out.println(</span>"-------main start-------"<span style="color: #000000;">);
        </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HelloB();
        </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> HelloB();
        System.out.println(</span>"-------main end-------"<span style="color: #000000;">);
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code </span></div>
<p>此时输出结果为：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">static</span><span style="color: #000000;"> A
</span><span style="color: #0000ff;">static</span><span style="color: #000000;"> B
</span>-------main start-------<span style="color: #000000;">
I</span>'m A class
<span style="color: #000000;">HelloA
I</span>'m B class
<span style="color: #000000;">HelloB
I</span>'m A class
<span style="color: #000000;">HelloA
I</span>'m B class
<span style="color: #000000;">HelloB
</span>-------main end-------</pre>
</div>
<p><span style="font-family: 'Microsoft Yahei';">&nbsp;</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-family: 'Microsoft Yahei';">21. </span><span>getCustomerInfo()</span><span>方法如下，</span><span>try</span><span>中可以捕获三种类型的异常，如果在该方法运行中产生了一个</span><span>IOException</span><span>，将会输出什么结果（</span><span>）</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">    public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> getCustomerInfo() {

        </span><span style="color: #0000ff;">try</span><span style="color: #000000;"> {

            </span><span style="color: #008000;">//</span><span style="color: #008000;"> do something that may cause an Exception</span>
<span style="color: #000000;">
        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (java.io.FileNotFoundException ex) {

            System.out.print(</span>"FileNotFoundException!"<span style="color: #000000;">);

        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (java.io.IOException ex) {

            System.out.print(</span>"IOException!"<span style="color: #000000;">);

        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (java.lang.Exception ex) {

            System.out.print(</span>"Exception!"<span style="color: #000000;">);

        }

    }</span></pre>
</div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>A </span><span>IOException!</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>B</span><span>IOException!Exception!</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>C</span><span>FileNotFoundException!IOException!</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>D</span><span>FileNotFoundException!IOException!Exception!</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">答案：A</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">解析：考察多个catch语句块的执行顺序。当用多个catch语句时，catch语句块在次序上有先后之分。从最前面的catch语句块依次先后进行异常类型匹配，这样如果父异常在子异常类之前，那么首先匹配的将是父异常类，子异常类将不会获得匹配的机会，也即子异常类型所在的catch语句块将是不可到达的语句。所以，一般将父类异常类即Exception老大放在catch语句块的最后一个。</p>
<p>&nbsp;</p>
<p><span style="font-family: 'Microsoft Yahei';">22. 下面代码的运行结果为：（）<br /></span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">import</span> java.io.*<span style="color: #000000;">;
</span><span style="color: #0000ff;">import</span> java.util.*<span style="color: #000000;">;

</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> foo{

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main (String[] args){

        String s;

        System.out.println(</span>"s=" +<span style="color: #000000;"> s);

    }

}</span></pre>
</div>
<p><span style="font-family: 'Microsoft Yahei';"><span>A </span><span>代码得到编译，并输出&ldquo;</span><span>s=</span><span>&rdquo;</span></span></p>
<p><span style="font-family: 'Microsoft Yahei';"><span>B </span><span>代码得到编译，并输出&ldquo;</span><span>s=null</span><span>&rdquo;</span></span></p>
<p><span style="font-family: 'Microsoft Yahei';"><span>C </span><span>由于</span><span>String s</span><span>没有初始化，代码不能编译通过</span></span></p>
<span style="font-family: 'Microsoft Yahei';"><span lang="EN-US">D </span>代码得到编译，但捕获到<span lang="EN-US"><span class="Apple-converted-space">&nbsp;</span>NullPointException</span>异常</span></div>
<div style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">
<p><span style="font-family: 'Microsoft Yahei';">答案：C</span></p>
<p><span style="font-family: 'Microsoft Yahei';">解析：开始以为会输出null什么的，运行后才发现Java中所有定义的基本类型或对象都必须初始化才能输出值。</span></p>
<p><span style="font-family: 'Microsoft Yahei';"> <br /></span></p>
<p><span style="font-family: 'Microsoft Yahei';">23. &nbsp;</span><span lang="EN-US">System.out.println("5" + 2);</span><span style="font-family: 宋体;">的输出结果应该是（</span><span style="font-family: 宋体;">）。</span></p>
<p><span>A </span><span>52&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B</span><span>7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C</span><span>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D</span><span>5</span></p>
<p><span>答案：A</span></p>
<p><span>解析：没啥好说的，Java会自动将2转换为字符串。</span></p>
<p>&nbsp;</p>
<p><span>24.&nbsp;</span><span style="font-family: 宋体;">指出下列程序运行的结果</span><span class="Apple-converted-space">&nbsp;</span><span style="font-family: 宋体;">（</span><span style="font-family: 宋体;">）</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Example {

    String str </span>= <span style="color: #0000ff;">new</span> String("good"<span style="color: #000000;">);

    </span><span style="color: #0000ff;">char</span>[] ch = { 'a', 'b', 'c'<span style="color: #000000;"> };

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String args[]) {

        Example ex </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> Example();

        ex.change(ex.str, ex.ch);

        System.out.print(ex.str </span>+ " and "<span style="color: #000000;">);

        System.out.print(ex.ch);

    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> change(String str, <span style="color: #0000ff;">char</span><span style="color: #000000;"> ch[]) {

        str </span>= "test ok"<span style="color: #000000;">;

        ch[</span>0] = 'g'<span style="color: #000000;">;

    }
}</span></pre>
</div>
<p><span>A</span><span>、</span><span><span class="Apple-converted-space">&nbsp;</span>good and abc</span></p>
<p><span>B</span><span>、</span><span><span class="Apple-converted-space">&nbsp;</span>good and gbc</span></p>
<p><span>C</span><span>、</span><span><span class="Apple-converted-space">&nbsp;</span>test ok and abc</span></p>
<span style="font-size: 10.5pt;" lang="EN-US">D</span><span style="font-size: 10.5pt; font-family: 宋体;">、</span><span style="font-size: 10.5pt;" lang="EN-US"><span class="Apple-converted-space">&nbsp;</span>test ok and gbc&nbsp;</span></div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-size: 10.5pt;" lang="EN-US">答案：B</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-size: 10.5pt;" lang="EN-US">解析：大家可能以为Java中String和数组都是对象所以肯定是对象引用，然后就会选D，其实这是个很大的误区：<strong><span style="color: #ff0000;">因为在java里没有引用传递，只有值传递</span></strong></span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-size: 10.5pt;" lang="EN-US">这个值指的是实参的地址的拷贝，得到这个拷贝地址后，<span style="color: #ff0000;">你可以通过它修改这个地址的内容（引用不变）</span>，因为此时这个内容的地址和原地址是同一地址，</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-size: 10.5pt;" lang="EN-US"><span style="color: #ff0000;">但是你不能改变这个地址本身使其重新引用其它的对象</span>，也就是值传递，可能说的不是很清楚，下面给出一个完整的能说明情况的例子吧：</span></p>
<div class="cnblogs_code" onclick="cnblogs_code_show('2a9a18ec-6ed4-461b-b2ea-956ff9ed062e')"><img id="code_img_closed_2a9a18ec-6ed4-461b-b2ea-956ff9ed062e" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_2a9a18ec-6ed4-461b-b2ea-956ff9ed062e" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('2a9a18ec-6ed4-461b-b2ea-956ff9ed062e',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_2a9a18ec-6ed4-461b-b2ea-956ff9ed062e" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">package</span><span style="color: #000000;"> test;

</span><span style="color: #008000;">/**</span><span style="color: #008000;">
 * @description Java中没有引用传递只有值传递
 * 
 * </span><span style="color: #808080;">@author</span><span style="color: #008000;"> Alexia
 * @date 2013-10-16
 * 
 </span><span style="color: #008000;">*/</span>
<span style="color: #0000ff;">class</span><span style="color: #000000;"> Person {

    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> String name;

    </span><span style="color: #0000ff;">private</span><span style="color: #000000;"> String sex;

    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Person(String x, String y) {
        </span><span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> x;
        </span><span style="color: #0000ff;">this</span>.sex =<span style="color: #000000;"> y;
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 重写toString()方法，方便输出</span>
    <span style="color: #0000ff;">public</span><span style="color: #000000;"> String toString() {

        </span><span style="color: #0000ff;">return</span> name + " " +<span style="color: #000000;"> sex;
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 交换对象引用</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> swapObject(Person p1, Person p2) {
        Person tmp </span>=<span style="color: #000000;"> p1;
        p1 </span>=<span style="color: #000000;"> p2;
        p2 </span>=<span style="color: #000000;"> tmp;
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 交换基本类型</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> swapInt(<span style="color: #0000ff;">int</span> a, <span style="color: #0000ff;">int</span><span style="color: #000000;"> b) {
        </span><span style="color: #0000ff;">int</span> tmp =<span style="color: #000000;"> a;
        a </span>=<span style="color: #000000;"> b;
        b </span>=<span style="color: #000000;"> tmp;
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 交换对象数组</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> swapObjectArray(Person[] p1, Person[] p2) {
        Person[] tmp </span>=<span style="color: #000000;"> p1;
        p1 </span>=<span style="color: #000000;"> p2;
        p2 </span>=<span style="color: #000000;"> tmp;
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 交换基本类型数组</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> swapIntArray(<span style="color: #0000ff;">int</span>[] x, <span style="color: #0000ff;">int</span><span style="color: #000000;">[] y) {
        </span><span style="color: #0000ff;">int</span>[] tmp =<span style="color: #000000;"> x;
        x </span>=<span style="color: #000000;"> y;
        y </span>=<span style="color: #000000;"> tmp;
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 改变对象数组中的内容</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> changeObjectArray(Person[] p1, Person[] p2) {
        Person tmp </span>= p1[1<span style="color: #000000;">];
        p1[</span>1] = p2[1<span style="color: #000000;">];
        p2[</span>1] =<span style="color: #000000;"> tmp;
        
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 再将p1[1]修改</span>
        Person p = <span style="color: #0000ff;">new</span> Person("wjl", "male"<span style="color: #000000;">);
        p1[</span>1] =<span style="color: #000000;"> p;
    }

    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 改变基本类型数组中的内容</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> changeIntArray(<span style="color: #0000ff;">int</span>[] x, <span style="color: #0000ff;">int</span><span style="color: #000000;">[] y) {
        </span><span style="color: #0000ff;">int</span> tmp = x[1<span style="color: #000000;">];
        x[</span>1] = y[1<span style="color: #000000;">];
        y[</span>1] =<span style="color: #000000;"> tmp;

        x[</span>1] = 5<span style="color: #000000;">;
    }
}

</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> ByValueTest {

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args) {

        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 建立并构造两个对象</span>
        Person p1 = <span style="color: #0000ff;">new</span> Person("Alexia", "female"<span style="color: #000000;">);
        Person p2 </span>= <span style="color: #0000ff;">new</span> Person("Edward", "male"<span style="color: #000000;">);

        System.out.println(</span>"对象交换前：p1 = " +<span style="color: #000000;"> p1.toString());
        System.out.println(</span>"对象交换前：p2 = " +<span style="color: #000000;"> p2.toString());
        
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 交换p1对象和p2对象</span>
<span style="color: #000000;">        Person.swapObject(p1, p2);
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 从交换结果中看出，实际对象并未交换</span>
        System.out.println("\n对象交换后：p1 = " +<span style="color: #000000;"> p1.toString());
        System.out.println(</span>"对象交换后：p2 = " +<span style="color: #000000;"> p2.toString());

        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 建立两个对象数组</span>
        Person[] arraya = <span style="color: #0000ff;">new</span> Person[2<span style="color: #000000;">];
        Person[] arrayb </span>= <span style="color: #0000ff;">new</span> Person[2<span style="color: #000000;">];

        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 分别构造数组对象</span>
        arraya[0] = <span style="color: #0000ff;">new</span> Person("Alexia", "female"<span style="color: #000000;">);
        arraya[</span>1] = <span style="color: #0000ff;">new</span> Person("Edward", "male"<span style="color: #000000;">);
        arrayb[</span>0] = <span style="color: #0000ff;">new</span> Person("jmwang", "female"<span style="color: #000000;">);
        arrayb[</span>1] = <span style="color: #0000ff;">new</span> Person("hwu", "male"<span style="color: #000000;">);

        System.out.println(</span>'\n' + "对象数组交换前：arraya[0] = "
                + arraya[0].toString() + ", arraya[1] = "
                + arraya[1<span style="color: #000000;">].toString());
        System.out.println(</span>"对象数组交换前：arrayb[0] = "
                + arrayb[0].toString() + ", arrayb[1] = "
                + arrayb[1<span style="color: #000000;">].toString());
        
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 交换这两个对象数组</span>
<span style="color: #000000;">        Person.swapObjectArray(arraya, arrayb);
        System.out.println(</span>'\n' + "对象数组交换后：arraya[0] = "
                + arraya[0].toString() + ", arraya[1] = "
                + arraya[1<span style="color: #000000;">].toString());
        System.out.println(</span>"对象数组交换后：arrayb[0] = "
                + arrayb[0].toString() + ", arrayb[1] = "
                + arrayb[1<span style="color: #000000;">].toString());

        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 建立两个普通数组</span>
        <span style="color: #0000ff;">int</span>[] a = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">int</span>[2<span style="color: #000000;">];
        </span><span style="color: #0000ff;">int</span>[] b = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">int</span>[2<span style="color: #000000;">];

        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 给数组个元素赋值</span>
        <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = 0; i &lt; a.length; i++<span style="color: #000000;">) {
            a[i] </span>=<span style="color: #000000;"> i;
            b[i] </span>= i + 1<span style="color: #000000;">;
        }

        System.out.println(</span>'\n' + "基本类型数组交换前：a[0] = " + a[0] + ", a[1] = " + a[1<span style="color: #000000;">]);
        System.out.println(</span>"基本类型数组交换前：b[0] = " + b[0] + ", b[1] = " + b[1<span style="color: #000000;">]);

        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 交换两个基本类型数组</span>
<span style="color: #000000;">        Person.swapIntArray(a, b);
        System.out.println(</span>'\n' + "基本类型数组交换后：a[0] = " + a[0] + ", a[1] = " + a[1<span style="color: #000000;">]);
        System.out.println(</span>"基本类型数组交换后：b[0] = " + b[0] + ", b[1] = " + b[1<span style="color: #000000;">]);
        
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 改变对象数组的内容</span>
<span style="color: #000000;">        Person.changeObjectArray(arraya, arrayb);
        System.out.println(</span>'\n' + "对象数组内容交换并改变后：arraya[1] = " + arraya[1<span style="color: #000000;">].toString());
        System.out.println(</span>"对象数组内容交换并改变后：arrayb[1] = " + arrayb[1<span style="color: #000000;">].toString());
        
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 改变基本类型数组的内容</span>
<span style="color: #000000;">        Person.changeIntArray(a, b);
        System.out.println(</span>'\n' + "基本类型数组内容交换并改变后：a[1] = " + a[1<span style="color: #000000;">]);
        System.out.println(</span>"基本类型数组内容交换并改变后：b[1] = " + b[1<span style="color: #000000;">]);
    }
}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code </span></div>
<p>程序有些啰嗦，但能反映问题，该程序运行结果为：</p>
<div class="cnblogs_code">
<pre>对象交换前：p1 =<span style="color: #000000;"> Alexia female
对象交换前：p2 </span>=<span style="color: #000000;"> Edward male

对象交换后：p1 </span>=<span style="color: #000000;"> Alexia female
对象交换后：p2 </span>=<span style="color: #000000;"> Edward male

对象数组交换前：arraya[</span>0] = Alexia female, arraya[1] =<span style="color: #000000;"> Edward male
对象数组交换前：arrayb[</span>0] = jmwang female, arrayb[1] =<span style="color: #000000;"> hwu male

对象数组交换后：arraya[</span>0] = Alexia female, arraya[1] =<span style="color: #000000;"> Edward male
对象数组交换后：arrayb[</span>0] = jmwang female, arrayb[1] =<span style="color: #000000;"> hwu male

基本类型数组交换前：a[</span>0] = 0, a[1] = 1<span style="color: #000000;">
基本类型数组交换前：b[</span>0] = 1, b[1] = 2<span style="color: #000000;">

基本类型数组交换后：a[</span>0] = 0, a[1] = 1<span style="color: #000000;">
基本类型数组交换后：b[</span>0] = 1, b[1] = 2<span style="color: #000000;">

对象数组内容交换并改变后：<span style="color: #ff0000;">arraya[</span></span><span style="color: #ff0000;">1] =</span><span style="color: #000000;"><span style="color: #ff0000;"> wjl male</span>
对象数组内容交换并改变后：<span style="color: #ff0000;">arrayb[</span></span><span style="color: #ff0000;">1] =</span><span style="color: #000000;"><span style="color: #ff0000;"> Edward male</span>

基本类型数组内容交换并改变后：</span><span style="color: #ff0000;">a[1] = 5</span><span style="color: #000000;">
基本类型数组内容交换并改变后：<span style="color: #ff0000;">b[</span></span><span style="color: #ff0000;">1] = 1</span></pre>
</div>
<p><strong><span style="color: #ff0000;">说明：不管是对象、基本类型还是对象数组、基本类型数组，在函数中都不能改变其实际地址但能改变其中的内容。</span></strong></p>
<div id="cnblogs_post_body" style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-size: 10.5pt;" lang="EN-US">&nbsp;</span></div>
<div id="cnblogs_post_body" style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="font-size: 10.5pt;" lang="EN-US">25.&nbsp;</span><span style="font-family: 宋体;">要从文件</span><span lang="EN-US">"file.dat"</span><span style="font-family: 宋体;">中读出第</span><span lang="EN-US">10</span><span style="font-family: 宋体;">个字节到变量</span><span lang="EN-US">c</span><span style="font-family: 宋体;">中</span><span lang="EN-US">,</span><span style="font-family: 宋体;">下列哪个方法适合</span><span lang="EN-US">?<span class="Apple-converted-space">&nbsp;</span></span><span style="font-family: 宋体;">（</span><span style="font-family: 宋体;">）</span></div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>A</span><span>&nbsp;</span><span>FileInputStream in=new FileInputStream("file.dat"); in.skip(9); int c=in.read();</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>B&nbsp;</span><span>FileInputStream in=new FileInputStream("file.dat"); in.skip(10); int c=in.read();</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>C</span><span>&nbsp;</span><span>FileInputStream in=new FileInputStream("file.dat"); int c=in.read();</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>D&nbsp;</span><span>RandomAccessFile in=new RandomAccessFile("file.dat"); in.skip(9); int c=in.readByte();</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>答案：A?D?</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>解析：long skip(long n)<span>作用是跳过n个字节不读，</span>主要用在包装流中的，因为一般流（如<span>FileInputStream）</span>只能顺序一个一个的读不能跳跃读，但是包装流可以用skip方法跳跃读取。那么什么是包装流呢？各种字节节点流类，它们都只具有读写字节内容的方法，以FileInputStream与FileOutputStream为例，它们只能在文件中读取或者向文件中写入字节，在实际应用中我们往往需要在文件中读取或者写入各种类型的数据，就必须先将其他类型的数据转换成字节数组后写入文件，或者从文件中读取到的字节数组转换成其他数据类型，想想都很麻烦！！因此想通过FileOutputStream将一个浮点小数写入到文件中或将一个整数写入到文件时是非常困难的。这时就需要包装类<span>DataInputStream</span>/DataOutputStream，它提供了往各种输入输出流对象中读入或写入各种类型的数据的方法。</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span><span>DataInputStream</span>/DataOutputStream</span>并没有对应到任何具体的流设备，一定要给它传递一个对应具体流设备的输入或输出流对象，完成类似 <span><span>DataInputStream</span>/DataOutputStream</span>功能的类就是一个包装类，也叫过滤流类或处理流类。它对InputOutStream/OutputStream流类进行了包装，使编程人员使用起来更方便。其中DataInputStream包装类的构造函数语法：public DataInputStream(InputStream in)。包装类也可以包装另外一个包装类。</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>首先BC肯定 是错的，那A正确吗？按上面的解析应该也不对，但我试了下，发现A也是正确的，与网上解析的资料有些出入，下面是我的code：<br /></span></p>
<div class="cnblogs_code" onclick="cnblogs_code_show('83cbda21-64ae-4e31-bd0b-ca581e1a6360')"><img id="code_img_closed_83cbda21-64ae-4e31-bd0b-ca581e1a6360" class="code_img_closed" src="http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="" /><img id="code_img_opened_83cbda21-64ae-4e31-bd0b-ca581e1a6360" class="code_img_opened" style="display: none;" onclick="cnblogs_code_hide('83cbda21-64ae-4e31-bd0b-ca581e1a6360',event)" src="http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif" alt="" />
<div id="cnblogs_code_open_83cbda21-64ae-4e31-bd0b-ca581e1a6360" class="cnblogs_code_hide">
<pre><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.FileInputStream;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.FileOutputStream;
</span><span style="color: #0000ff;">import</span><span style="color: #000000;"> java.io.IOException;

</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> FileStreamTest {

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> main(String[] args) <span style="color: #0000ff;">throws</span><span style="color: #000000;"> IOException {
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> TODO Auto-generated method stub</span>
<span style="color: #000000;">
        FileOutputStream out </span>= <span style="color: #0000ff;">new</span> FileOutputStream("file.dat"<span style="color: #000000;">);

        </span><span style="color: #0000ff;">byte</span>[] b = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10<span style="color: #000000;"> };
        out.write(b);
        out.close();
        
        FileInputStream in </span>= <span style="color: #0000ff;">new</span> FileInputStream("file.dat"<span style="color: #000000;">);
        in.skip(</span>9); <span style="color: #008000;">//</span><span style="color: #008000;"> 跳过前面的9个字节</span>
        <span style="color: #0000ff;">int</span> c =<span style="color: #000000;"> in.read();
        System.out.println(c);  </span><span style="color: #008000;">//</span><span style="color: #008000;"> 输出为10</span>
<span style="color: #000000;">        in.close();
    }

}</span></pre>
</div>
<span class="cnblogs_code_collapse">View Code </span></div>
<p>那么D呢，<span style="font-size: 14px;">RandomAccessFile是IO包的类，但是其<span style="color: #ff0000;">自成一派，从Object直接继承而来</span>。可以对文件进行读取和写入。支持文件的随机访问，即可以随机读取文件中的某个位置内容，这么说<span style="font-size: 14px;">RandomAccessFile</span>肯定可以达到题目的要求，但是选项有些错误，比如<span>RandomAccessFile</span>的初始化是两个参数而非一个参数，采用的跳跃读取方法是skipBytes()而非skip()，即正确的写法是：</span></p>
<div class="cnblogs_code">
<pre>RandomAccessFile in = <span style="color: #0000ff;">new</span> RandomAccessFile("file.dat", "r"<span style="color: #000000;">);
in.skipBytes(</span>9<span style="color: #000000;">);
</span><span style="color: #0000ff;">int</span> c = in.readByte();</pre>
</div>
<p><span style="color: #ff0000;">这样也能读到第十个字节，也就是A和D都能读到第十个字节，那么到底该选哪个呢？A和D有啥不同吗？求大神解答~~~</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">&nbsp;</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>26.&nbsp;</span><span>下列哪种异常是检查型异常，需要在编写程序时声明</span><span class="Apple-converted-space">&nbsp;</span><span>（</span><span>）</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>A</span><span>NullPointerException&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B</span><span lang="EN-US">ClassCastException&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C</span><span lang="EN-US">FileNotFoundException&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D IndexOutOfBoundsException</span><span>&nbsp;</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>答案：C</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>解析：看第2题的解析。</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">&nbsp;</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>27. 下面的方法，当输入为</span><span>2</span><span>的时候返回值是多少</span><span>?</span><span>（</span><span>）</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">    public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">int</span> getValue(<span style="color: #0000ff;">int</span><span style="color: #000000;"> i) {
        </span><span style="color: #0000ff;">int</span> result = 0<span style="color: #000000;">;
        </span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (i) {
        </span><span style="color: #0000ff;">case</span> 1<span style="color: #000000;">:
            result </span>= result +<span style="color: #000000;"> i;
        </span><span style="color: #0000ff;">case</span> 2<span style="color: #000000;">:
            result </span>= result + i * 2<span style="color: #000000;">;
        </span><span style="color: #0000ff;">case</span> 3<span style="color: #000000;">:
            result </span>= result + i * 3<span style="color: #000000;">;
        }
        </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> result;
    }</span></pre>
</div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>A</span><span>0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B</span><span>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C</span><span>4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D</span><span>10</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>答案：D</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>解析：注意这里case后面没有加break，所以从case 2开始一直往下运行。</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>&nbsp;</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>28.&nbsp;</span><span>选项中哪一行代码可以替换题目中</span><span>//add code here</span><span>而不产生编译错误？（</span><span>）</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">abstract</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> MyClass {<br />
     </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> constInt = 5<span style="color: #000000;">;
     </span><span style="color: #008000;">//</span><span style="color: #008000;">add code here</span>
     <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> method() {
     }
}</span></pre>
</div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>A</span><span>public abstract void method(int a);</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>B constInt = constInt + 5;</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>C </span><span>public int method();</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>D </span><span>public abstract void anotherMethod() {}</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>答案：A</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>解析：考察抽象类的使用。</span></p>
<p style="color: #000000; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="color: #ff0000;">抽象类遵循的原则：</span></p>
<div style="color: #000000; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="color: #ff0000;">（1）abstract关键字只能修饰类和方法，不能修饰字段。</span></div>
<div style="color: #000000; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">（2）抽象类不能被实例化（无法使用new关键字创建对象实例），只能被继承。</div>
<div style="color: #000000; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">（3）抽象类可以包含属性，方法，构造方法，初始化块，内部类，枚举类，和普通类一样，<span style="color: #ff0000;">普通方法一定要实现，变量可以初始化或不初始化但不能初始化后在抽象类中重新赋值或操作该变量（只能在子类中改变该变量）。</span></div>
<div style="color: #000000; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="color: #ff0000;">（4）抽象类中的抽象方法（加了abstract关键字的方法）不能实现。</span></div>
<div style="color: #000000; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">（5）含有抽象方法的类必须定义成抽象类。</div>
<div style="color: #000000; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">&nbsp;</div>
<div style="color: #000000; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">扩展：抽象类和接口的区别，做个总结吧：</div>
<div style="color: #000000; font-family: 'Microsoft Yahei'; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">
<p><span style="font-size: 14px; color: #000080;">（1）<span style="font-size: 14px;">接口是公开的，里面不能有私有的方法或变量，是用于让别人使用的，而抽象类是可以有私有方法或私有变量的。</span><br /></span></p>
<p><span style="font-size: 14px; color: #000080;">（2）abstract class 在 Java 语言中表示的是一种继承关系，一个类只能使用一次继承关系。但是，一个类却可以实现多个interface，实现多重继承。<span style="font-size: 14px;">接口还有标识（里面没有任何方法，如Remote接口）和数据共享（里面的变量全是常量）的作用。</span></span></p>
<p><span style="font-size: 14px; color: #000080;">（3）在abstract class 中可以有自己的数据成员，也可以有非abstarct的成员方法，而在interface中，只能够有静态的不能被修改的数据成员（也就是必须是 static final的，不过在 interface中一般不定义数据成员），所有的成员方法<span style="font-size: 14px;">默认都是 public abstract 类型的。</span></span></p>
<p><span style="font-size: 14px; color: #000080;">（4）abstract class和interface所反映出的设计理念不同。其实abstract class表示的是"is-a"关系，interface表示的是"has-a"关系。</span></p>
<p><span style="font-size: 14px; color: #000080;">（5）<span style="font-size: 14px;">实现接口的一定要实现接口里定义的所有方法，而实现抽象类可以有选择地重写需要用到的方法，一般的应用里，最顶级的是接口，然后是抽象类实现接口，最后才到具体类实现</span>。抽象类中可以有非抽象方法。接口中则不能有实现方法。</span></p>
<p><span style="font-size: 14px; color: #000080;">（6）接口中定义的变量默认是public static final 型，且必须给其初值，所以实现类中不能重新定义，也不能改变其值。抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以在子类中重新赋值。</span></p>







</div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>&nbsp;</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>29. 阅读</span><span>Shape</span><span>和</span><span>Circle</span><span>两个类的定义。在序列化一个</span><span>Circle</span><span>的对象</span><span>circle</span><span>到文件时，下面哪个字段会被保存到文件中？</span><span><span class="Apple-converted-space">&nbsp;</span>(&nbsp; )</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">class</span><span style="color: #000000;"> Shape {

       </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String name;

}

</span><span style="color: #0000ff;">class</span> Circle <span style="color: #0000ff;">extends</span> Shape <span style="color: #0000ff;">implements</span><span style="color: #000000;"> Serializable{

       </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">float</span><span style="color: #000000;"> radius;

       </span><span style="color: #0000ff;">transient</span> <span style="color: #0000ff;">int</span><span style="color: #000000;"> color;

       </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> String type = "Circle"<span style="color: #000000;">;

}</span></pre>
</div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>A</span><span>name</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>B </span><span>radius</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>C </span><span>color</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>D </span><span>type</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>答案：B</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>解析：这里有详细的解释：<a href="http://www.cnblogs.com/lanxuezaipiao/p/3369962.html" target="_blank">http://www.cnblogs.com/lanxuezaipiao/p/3369962.html</a></span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>&nbsp;</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>30.</span><span>下面是</span><span>People</span><span>和</span><span>Child</span><span>类的定义和构造方法，每个构造方法都输出编号。在执行</span><span>new Child("mike")</span><span>的时候都有哪些构造方法被顺序调用？请选择输出结果</span><span><span class="Apple-converted-space">&nbsp;</span>( )</span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">class</span><span style="color: #000000;"> People {
    String name;

    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> People() {
        System.out.print(</span>1<span style="color: #000000;">);
    }

    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> People(String name) {
        System.out.print(</span>2<span style="color: #000000;">);
        </span><span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
    }
}

</span><span style="color: #0000ff;">class</span> Child <span style="color: #0000ff;">extends</span><span style="color: #000000;"> People {
    People father;

    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Child(String name) {
        System.out.print(</span>3<span style="color: #000000;">);
        </span><span style="color: #0000ff;">this</span>.name =<span style="color: #000000;"> name;
        father </span>= <span style="color: #0000ff;">new</span> People(name + ":F"<span style="color: #000000;">);
    }

    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Child() {
        System.out.print(</span>4<span style="color: #000000;">);
    }
    
}</span></pre>
</div>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>A</span><span>312&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B 32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C 432&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; D 132</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>答案：D</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span>解析：考察的又是父类与子类的构造函数调用次序。在Java中，子类的构造过程中必须调用其父类的构造函数，是因为有继承关系存在时，子类要把父类的内容继承下来。但如果父类有多个构造函数时，该如何选择调用呢？</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">第一个规则：子类的构造过程中，必须调用其父类的构造方法。一个类，如果我们不写构造方法，那么编译器会帮我们加上一个默认的构造方法（就是没有参数的构造方法），但是如果你自己写了构造方法，那么编译器就不会给你添加了，所以有时候当你new一个子类对象的时候，肯定调用了子类的构造方法，但是<span style="color: #ff0000;">如果在子类构造方法中我们并没有显示的调用基类的构造方法，如：super();<span class="Apple-converted-space">&nbsp;</span>&nbsp;这样就会调用父类没有参数的构造方法。&nbsp;&nbsp;&nbsp;&nbsp;</span></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">第二个规则：<span style="color: #ff0000;">如果子类的构造方法中既没有显示的调用基类构造方法，而基类中又没有无参的构造方法，则编译出错</span>，所以，通常我们需要显示的：super(参数列表)，来调用父类有参数的构造函数，此时无参的构造函数就不会被调用。</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><strong><span style="color: #ff0000;">总之，一句话：子类没有显示调用父类构造函数，不管子类构造函数是否带参数都默认调用父类无参的构造函数，若父类没有则编译出错。</span></strong></p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;">&nbsp;</p>
<p style="color: #000000; font-family: 微软雅黑; font-size: 14px; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px;"><span style="color: #000000;"><strong>最后，给大家出个思考题：下面程序的运行结果是什么？</strong></span></p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> Dervied <span style="color: #0000ff;">extends</span><span style="color: #000000;"> Base {

    </span><span style="color: #0000ff;">private</span> String name = "dervied"<span style="color: #000000;">;

    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Dervied() {
        tellName();
        printName();
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> tellName() {
        System.out.println(</span>"Dervied tell name: " +<span style="color: #000000;"> name);
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> printName() {
        System.out.println(</span>"Dervied print name: " +<span style="color: #000000;"> name);
    }

    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> main(String[] args){
        
        </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Dervied();    
    }
}

</span><span style="color: #0000ff;">class</span><span style="color: #000000;"> Base {
    
    </span><span style="color: #0000ff;">private</span> String name = "base"<span style="color: #000000;">;

    </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> Base() {
        tellName();
        printName();
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> tellName() {
        System.out.println(</span>"Base tell name: " +<span style="color: #000000;"> name);
    }
    
    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> printName() {
        System.out.println(</span>"Base print name: " +<span style="color: #000000;"> name);
    }
}</span></pre>
</div></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2013-10-16 15:16</span> <a href='http://www.cnblogs.com/lanxuezaipiao/'>Alexia(minmin)</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://i.cnblogs.com/EditPosts.aspx?postid=3371224" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(3371224);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=113759,cb_entryId=3371224,cb_blogApp=currentBlogApp,cb_blogUserGuid='edc6b140-ec73-e111-aa3f-842b2b196315',cb_entryCreatedDate='2013/10/16 15:16:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
<a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = canShowAdsense(); var googletag = googletag || {}; googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
</script>
<div id="ad_under_post_holder">
<script type='text/javascript'>
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        if (enableGoogleAd) {
            var gads = document.createElement('script');
            gads.async = true;
            gads.type = 'text/javascript';
            var useSSL = 'https:' == document.location.protocol;
            gads.src = (useSSL ? 'https:' : 'http:') + '//www.googletagservices.com/tag/js/gpt.js';
            var node = document.getElementsByTagName('script')[0];
            node.parentNode.insertBefore(gads, node);
        }
    })();
</script>
<script type='text/javascript'>
    try {
        if (enableGoogleAd) {
            googletag.cmd.push(function () {
                googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
                googletag.defineSlot('/1090369/cnblogs_blogpost_C2', [468, 60], 'div-gpt-ad-1410860226396-0').addService(googletag.pubads());
                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        };
    } catch (e) { }
</script>
<div id="google_ad_c1" class="c_ad_block">
    <div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'>
    <script type='text/javascript'>
        try {
            if (enableGoogleAd) {
                googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });            
            } else {
                $('#div-gpt-ad-1346480159711-0').hide();
            }
    } catch (e) { }
    </script>
    </div>
</div>
</div>
<div id="under_post_news"></div>
<div id="google_ad_c2" class="c_ad_block">
<div id='div-gpt-ad-1410860226396-0' style='width:468px; height:60px;'>
<script type='text/javascript'>
try {
    if (enableGoogleAd) {
        googletag.cmd.push(function () { googletag.display('div-gpt-ad-1410860226396-0'); });
    } else {
        $('#div-gpt-ad-1346480159711-0').hide();
    }
} catch (e) { }
</script>
</div>
</div>
<div id="under_post_kb"></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    setTimeout(function () { incrementViewCount(cb_entryId); }, 200);
});
</script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2014 Alexia(minmin)
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
<!--PageEndHtml Block Begin-->
<script type="text/javascript">
    var wumiiSitePrefix = "http://www.cnblogs.com/lanxuezaipiao/";
    var wumiiParams = "&num=5&mode=3&pf=CNBLOGS";
</script>
<script type="text/javascript" src="http://widget.wumii.cn/ext/relatedItemsWidget"></script>
<a href="http://www.wumii.com/widget/relatedItems" style="border:0;">
    <img src="http://static.wumii.cn/images/pixel.png" alt="无觅关联推荐，快速提升流量" style="border:0;padding:0;margin:0;" />
</a>



<!--评论，生成气泡效果标签代码-->
<script type="text/javascript" language="javascript"> 
    $(document).ready(function() {
        var commentTime = setInterval(function(){if($("#comments_pager_bottom").length>0){CommentBubble();clearTimeout(commentTime);}},50);
    }); 
    function CommentBubble()
    {
var w1 = '<div class="list">' +
        '<table class="out" border="0" cellspacing="0" cellpadding="0"> ' +
            '<tr>' +
                '<td class="icontd" align="right" valign="bottom">' +
                    '<img src="http://images.cnblogs.com/cnblogs_com/lanxuezaipiao/533599/o_%E5%A4%B4%E5%83%8F.png" width="56px" height="57px"/>' +
                '</td>' +
                '<td align="left" valign="bottom" class="q">' +
                    '<table border="0" cellpadding="0" cellspacing="0" style=""> ' +
                        '<tr><td class="topleft"></td><td class="top"></td><td class="topright"></td></tr> ' +
                        '<tr><td class="left"></td> <td align="left" class="conmts"><p>';
 
 
        var w2 = '</p> </td> <td class="right"></td></tr> ' +
                        '<tr><td class="bottomleft"></td><td class="bottom"></td><td class="bottomright"></td></tr> ' +
                    '</table>' +
                '</td> ' +
            '</tr> ' +
        '</table> ' +
    '</div>';
 
        $.each($(".blog_comment_body"), function(i, t) {
            $(t).html(w1 + $(t).html() + w2);
        });
$(".louzhu").closest(".feedbackItem").find(".out").removeClass("out").addClass("inc");
        /*.find(".q").attr("align","right");*/
        }
</script>
<!--PageEndHtml Block End-->
</body>
</html>
